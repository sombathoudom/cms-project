import csv
import re
from pathlib import Path


def camelize(value: str) -> str:
    parts = re.findall(r"[A-Za-z0-9]+", value)
    return "".join(part.capitalize() for part in parts)


def format_labels(issue: dict) -> str:
    return ";".join([
        f"epic:{camelize(issue['epic'])}",
        f"type:{camelize(issue['type'])}",
        f"priority:{issue['priority']}",
        f"area:{camelize(issue['area'])}",
    ])


def build_body(issue: dict) -> str:
    scope_lines = "\n".join(f"- [ ] {item}" for item in issue["scope"])
    dependencies = ", ".join(issue["dependencies"]) if issue["dependencies"] else "None"
    body = f"""### Summary
{issue['summary']}

### Scope
{scope_lines}

### Acceptance Criteria
- [ ] CRUD/API/Filament with RBAC
- [ ] Tenant/brand scope enforced
- [ ] Audit log entries
- [ ] Indexes on foreign keys
- [ ] Tests (happy + error paths)

### Notes
- tenant-scope, RBAC, audit-log
- Observability: JSON logs + correlation-id
- Dependencies: {dependencies}
"""
    return body


issues = [
    {
        "id": "E1-F1-I1",
        "epic": "Authentication & User Management",
        "type": "backend",
        "priority": "P0",
        "area": "authentication",
        "title": "Implement Laravel auth scaffolding",
        "summary": "Set up Laravel authentication scaffolding to provide core login, registration, and password reset flows.",
        "scope": [
            "Install and configure Laravel auth starter kit",
            "Enable email verification and password reset notifications",
            "Cover login and registration with feature tests",
        ],
        "dependencies": ["E11-F1-I1"],
        "milestone": "Week 1",
    },
    {
        "id": "E1-F1-I2",
        "epic": "Authentication & User Management",
        "type": "backend",
        "priority": "P0",
        "area": "authorization",
        "title": "Configure role definitions & middleware guards",
        "summary": "Seed user roles with permissions and enforce route access via middleware and policies.",
        "scope": [
            "Define roles and permissions for Admin, Editor, Author, Viewer",
            "Register middleware and policies for protected routes",
            "Write authorization feature tests for forbidden access",
        ],
        "dependencies": ["E1-F1-I1", "E11-F1-I5"],
        "milestone": "Week 1",
    },
    {
        "id": "E1-F1-I3",
        "epic": "Authentication & User Management",
        "type": "backend",
        "priority": "P1",
        "area": "user management",
        "title": "Develop user management controllers & validation",
        "summary": "Build CRUD controllers and services for managing users with strict validation rules.",
        "scope": [
            "Implement user controller actions for create/update/delete",
            "Add request validation preventing privilege escalation",
            "Return consistent success and error responses",
        ],
        "dependencies": ["E1-F1-I2", "E11-F1-I2"],
        "milestone": "Week 2",
    },
    {
        "id": "E1-F1-I4",
        "epic": "Authentication & User Management",
        "type": "frontend",
        "priority": "P1",
        "area": "user management ui",
        "title": "Build user management Blade UI",
        "summary": "Create Blade views for listing, filtering, and editing users within the admin layout.",
        "scope": [
            "Design user list with filters and pagination",
            "Create forms for user create/edit with role selectors",
            "Automate browser tests for UI CRUD flows",
        ],
        "dependencies": ["E1-F1-I3"],
        "milestone": "Week 2",
    },
    {
        "id": "E1-F1-I5",
        "epic": "Authentication & User Management",
        "type": "backend",
        "priority": "P1",
        "area": "security",
        "title": "Enforce password policy and session timeout",
        "summary": "Apply password complexity rules and configure idle session timeout for user security.",
        "scope": [
            "Define password validation rules including complexity",
            "Configure middleware to enforce session timeout",
            "Localize user-facing policy violation messages",
        ],
        "dependencies": ["E1-F1-I1"],
        "milestone": "Week 2",
    },
    {
        "id": "E1-F1-I6",
        "epic": "Authentication & User Management",
        "type": "backend",
        "priority": "P1",
        "area": "auditing",
        "title": "Implement user action audit logging",
        "summary": "Capture audit log entries for user CRUD actions and expose admin reporting.",
        "scope": [
            "Create audit log table and Eloquent model",
            "Emit events/listeners to record user management actions",
            "Build filtered report view for audit records",
        ],
        "dependencies": ["E1-F1-I3", "E11-F1-I3"],
        "milestone": "Week 3",
    },
    {
        "id": "E1-F1-I7",
        "epic": "Authentication & User Management",
        "type": "documentation",
        "priority": "P3",
        "area": "authentication",
        "title": "TBD: Clarify two-factor authentication rollout",
        "summary": "Document desired two-factor authentication approach and approvals for post-MVP planning.",
        "scope": [
            "Meet stakeholders to capture 2FA requirements",
            "Document recommended libraries and UX considerations",
            "Record approvals and create follow-up backlog item",
        ],
        "dependencies": [],
        "milestone": "Week 4",
    },
    {
        "id": "E2-F1-I1",
        "epic": "Content Management (Pages & Posts)",
        "type": "backend",
        "priority": "P0",
        "area": "content model",
        "title": "Design unified content schema",
        "summary": "Create unified content database schema and model supporting posts and pages.",
        "scope": [
            "Author migration for unified content table",
            "Implement Eloquent model with polymorphic relations",
            "Seed sample content data for testing",
        ],
        "dependencies": ["E11-F1-I1", "E11-F1-I2"],
        "milestone": "Week 1",
    },
    {
        "id": "E2-F1-I2",
        "epic": "Content Management (Pages & Posts)",
        "type": "backend",
        "priority": "P1",
        "area": "workflow",
        "title": "Implement content status transitions",
        "summary": "Establish state machine enforcing draft, review, published, and scheduled content states.",
        "scope": [
            "Define state machine for content lifecycle",
            "Prevent invalid transitions with descriptive errors",
            "Add unit tests for each workflow path",
        ],
        "dependencies": ["E2-F1-I1", "E11-F1-I3"],
        "milestone": "Week 2",
    },
    {
        "id": "E2-F1-I3",
        "epic": "Content Management (Pages & Posts)",
        "type": "backend",
        "priority": "P1",
        "area": "content model",
        "title": "Build slug generation and validation service",
        "summary": "Provide service to auto-generate unique slugs with validation rules for content titles.",
        "scope": [
            "Implement slug generation with transliteration",
            "Enforce reserved and duplicate slug validation",
            "Trigger auto-generation on title updates",
        ],
        "dependencies": ["E2-F1-I1"],
        "milestone": "Week 1",
    },
    {
        "id": "E2-F1-I4",
        "epic": "Content Management (Pages & Posts)",
        "type": "backend",
        "priority": "P1",
        "area": "versioning",
        "title": "Create revision history & rollback",
        "summary": "Store content revisions with rollback support and actor attribution.",
        "scope": [
            "Model revision history with diff metadata",
            "Implement rollback action with audit trail",
            "Test data integrity after rollbacks",
        ],
        "dependencies": ["E2-F1-I1", "E11-F1-I3"],
        "milestone": "Week 2",
    },
    {
        "id": "E2-F1-I5",
        "epic": "Content Management (Pages & Posts)",
        "type": "fullstack",
        "priority": "P1",
        "area": "editor experience",
        "title": "Integrate rich text editor with auto-save & preview",
        "summary": "Embed rich text editor supporting auto-save drafts and preview rendering.",
        "scope": [
            "Install and configure chosen rich text editor",
            "Implement auto-save intervals for draft content",
            "Provide preview mode via signed route",
        ],
        "dependencies": ["E2-F1-I1", "E11-F1-I4"],
        "milestone": "Week 3",
    },
    {
        "id": "E2-F1-I6",
        "epic": "Content Management (Pages & Posts)",
        "type": "backend",
        "priority": "P2",
        "area": "workflow",
        "title": "Implement content duplication & quick publish",
        "summary": "Allow duplicating content with related data and provide quick publish action for authorized roles.",
        "scope": [
            "Create duplication routine for content and relationships",
            "Add quick publish endpoint with permission checks",
            "Verify cloned records generate unique slugs",
        ],
        "dependencies": ["E2-F1-I2"],
        "milestone": "Week 3",
    },
    {
        "id": "E3-F1-I1",
        "epic": "Media Library",
        "type": "backend",
        "priority": "P0",
        "area": "media",
        "title": "Configure media storage adapters",
        "summary": "Configure Flysystem disks for local and S3 media storage with validation.",
        "scope": [
            "Set up local and S3 disks with environment toggles",
            "Document storage symlink and permission steps",
            "Smoke test uploads to each disk",
        ],
        "dependencies": ["E11-F1-I4"],
        "milestone": "Week 1",
    },
    {
        "id": "E3-F1-I2",
        "epic": "Media Library",
        "type": "backend",
        "priority": "P1",
        "area": "media",
        "title": "Implement media upload validation & metadata capture",
        "summary": "Create media upload endpoint enforcing validation and storing metadata.",
        "scope": [
            "Validate uploads against MIME type and size limits",
            "Persist media metadata including uploader",
            "Return stored metadata in API response",
        ],
        "dependencies": ["E3-F1-I1"],
        "milestone": "Week 1",
    },
    {
        "id": "E3-F1-I3",
        "epic": "Media Library",
        "type": "backend",
        "priority": "P1",
        "area": "media",
        "title": "Build thumbnail generation pipeline",
        "summary": "Generate optimized thumbnails asynchronously for uploaded images.",
        "scope": [
            "Create jobs to produce configured thumbnail sizes",
            "Attach thumbnail metadata to media records",
            "Test generation and cleanup on delete",
        ],
        "dependencies": ["E3-F1-I2"],
        "milestone": "Week 2",
    },
    {
        "id": "E3-F1-I4",
        "epic": "Media Library",
        "type": "frontend",
        "priority": "P1",
        "area": "media ui",
        "title": "Develop media library browser UI",
        "summary": "Provide admin media browser with filters, pagination, and bulk actions.",
        "scope": [
            "Design media listing with search and filters",
            "Implement bulk selection and delete workflows",
            "Integrate UI into existing admin layout",
        ],
        "dependencies": ["E3-F1-I2"],
        "milestone": "Week 2",
    },
    {
        "id": "E3-F1-I5",
        "epic": "Media Library",
        "type": "fullstack",
        "priority": "P1",
        "area": "editor experience",
        "title": "Embed media picker into content editor",
        "summary": "Integrate media picker modal into content editor to insert responsive media.",
        "scope": [
            "Expose media picker with search and upload tabs",
            "Insert responsive markup with alt text handling",
            "Verify picker works for posts and pages",
        ],
        "dependencies": ["E3-F1-I4", "E2-F1-I5"],
        "milestone": "Week 3",
    },
    {
        "id": "E3-F1-I6",
        "epic": "Media Library",
        "type": "backend",
        "priority": "P2",
        "area": "media",
        "title": "Enable media replacement with stable URLs",
        "summary": "Allow replacing media files while preserving stable URLs and audit history.",
        "scope": [
            "Implement replace action keeping media IDs",
            "Handle archival or purge of old files",
            "Log replacement events for auditing",
        ],
        "dependencies": ["E3-F1-I2"],
        "milestone": "Week 3",
    },
    {
        "id": "E3-F1-I7",
        "epic": "Media Library",
        "type": "backend",
        "priority": "P1",
        "area": "media",
        "title": "Link media assets to content records",
        "summary": "Implement polymorphic relationships between media assets and content entities.",
        "scope": [
            "Define polymorphic relation for media attachments",
            "Ensure cascade cleanup prevents orphaned files",
            "Test retrieval of media per content item",
        ],
        "dependencies": ["E3-F1-I2", "E2-F1-I1"],
        "milestone": "Week 2",
    },
    {
        "id": "E4-F1-I1",
        "epic": "Taxonomy & Metadata",
        "type": "backend",
        "priority": "P0",
        "area": "taxonomy",
        "title": "Create taxonomy schema with hierarchy",
        "summary": "Define database schema and models for hierarchical categories and tags.",
        "scope": [
            "Write migrations for categories and tags with hierarchy",
            "Add model helpers for ancestry queries",
            "Seed baseline taxonomy data",
        ],
        "dependencies": ["E11-F1-I1", "E11-F1-I2"],
        "milestone": "Week 1",
    },
    {
        "id": "E4-F1-I2",
        "epic": "Taxonomy & Metadata",
        "type": "frontend",
        "priority": "P1",
        "area": "taxonomy ui",
        "title": "Build taxonomy management UI",
        "summary": "Deliver admin UI for managing categories and tags with drag-and-drop ordering.",
        "scope": [
            "Create CRUD views for categories and tags",
            "Implement drag-and-drop reordering with validation",
            "Automate browser tests for taxonomy flows",
        ],
        "dependencies": ["E4-F1-I1"],
        "milestone": "Week 2",
    },
    {
        "id": "E4-F1-I3",
        "epic": "Taxonomy & Metadata",
        "type": "backend",
        "priority": "P1",
        "area": "taxonomy",
        "title": "Implement taxonomy assignment & filters",
        "summary": "Enable assigning categories and tags to content and filtering listings accordingly.",
        "scope": [
            "Add category and tag selection to content forms",
            "Expose admin filters by taxonomy",
            "Reflect taxonomy filters in API responses",
        ],
        "dependencies": ["E4-F1-I1", "E2-F1-I1"],
        "milestone": "Week 2",
    },
    {
        "id": "E4-F1-I4",
        "epic": "Taxonomy & Metadata",
        "type": "backend",
        "priority": "P1",
        "area": "seo",
        "title": "Implement SEO meta fields & defaults",
        "summary": "Capture SEO metadata for content and fall back to site defaults when absent.",
        "scope": [
            "Add meta title, description, canonical fields to forms",
            "Resolve default values from site settings",
            "Validate canonical URL format and lengths",
        ],
        "dependencies": ["E2-F1-I1", "E7-F1-I1"],
        "milestone": "Week 3",
    },
    {
        "id": "E4-F1-I5",
        "epic": "Taxonomy & Metadata",
        "type": "backend",
        "priority": "P2",
        "area": "seo",
        "title": "Generate XML sitemap and manage robots.txt",
        "summary": "Automate sitemap generation and configurable robots.txt management for published content.",
        "scope": [
            "Schedule command to regenerate sitemap",
            "Expose configurable robots.txt content",
            "Cache and test public endpoints",
        ],
        "dependencies": ["E4-F1-I4", "E6-F1-I2"],
        "milestone": "Week 3",
    },
    {
        "id": "E4-F1-I6",
        "epic": "Taxonomy & Metadata",
        "type": "backend",
        "priority": "P1",
        "area": "routing",
        "title": "Configure category-based routing",
        "summary": "Adopt /blog/{category}/{slug} routing with breadcrumbs and redirects.",
        "scope": [
            "Define routes respecting category hierarchy",
            "Update breadcrumbs and canonical links",
            "Handle redirects for legacy slugs",
        ],
        "dependencies": ["E4-F1-I1", "E6-F1-I2"],
        "milestone": "Week 2",
    },
    {
        "id": "E5-F1-I1",
        "epic": "Publishing Workflow",
        "type": "backend",
        "priority": "P0",
        "area": "workflow",
        "title": "Implement workflow state machine",
        "summary": "Create workflow engine tracking status transitions with history and actor notes.",
        "scope": [
            "Model workflow states and history records",
            "Enforce allowed transitions with service layer",
            "Test success and error paths for transitions",
        ],
        "dependencies": ["E2-F1-I2", "E11-F1-I3"],
        "milestone": "Week 2",
    },
    {
        "id": "E5-F1-I2",
        "epic": "Publishing Workflow",
        "type": "backend",
        "priority": "P1",
        "area": "workflow",
        "title": "Configure role-based workflow permissions",
        "summary": "Align workflow actions with role permissions and hide unauthorized options in UI.",
        "scope": [
            "Define role-to-action matrix for workflow",
            "Guard actions with policies and middleware",
            "Add authorization tests for forbidden states",
        ],
        "dependencies": ["E1-F1-I2", "E5-F1-I1"],
        "milestone": "Week 2",
    },
    {
        "id": "E5-F1-I3",
        "epic": "Publishing Workflow",
        "type": "backend",
        "priority": "P1",
        "area": "scheduling",
        "title": "Implement scheduled publishing jobs",
        "summary": "Schedule queued jobs to publish content at configured timestamps with retries.",
        "scope": [
            "Create job to publish content at publish_at",
            "Document scheduler configuration",
            "Record failures with alert hooks",
        ],
        "dependencies": ["E5-F1-I1"],
        "milestone": "Week 2",
    },
    {
        "id": "E5-F1-I4",
        "epic": "Publishing Workflow",
        "type": "backend",
        "priority": "P1",
        "area": "workflow",
        "title": "Provide secure preview links",
        "summary": "Offer signed preview URLs to access draft content without authentication.",
        "scope": [
            "Generate signed preview URLs with expiry",
            "Render draft content with publish layout",
            "Log preview access for audit",
        ],
        "dependencies": ["E2-F1-I5", "E5-F1-I1"],
        "milestone": "Week 3",
    },
    {
        "id": "E5-F1-I5",
        "epic": "Publishing Workflow",
        "type": "backend",
        "priority": "P2",
        "area": "workflow",
        "title": "Send approval notifications & change logs",
        "summary": "Dispatch notifications on workflow transitions and capture change log entries.",
        "scope": [
            "Configure notifications for reviewers and authors",
            "Record change log with action metadata",
            "Make notification channels configurable",
        ],
        "dependencies": ["E5-F1-I2", "E11-F1-I3"],
        "milestone": "Week 3",
    },
    {
        "id": "E5-F1-I6",
        "epic": "Publishing Workflow",
        "type": "backend",
        "priority": "P2",
        "area": "workflow",
        "title": "Implement quick and bulk publish actions",
        "summary": "Add quick and bulk publish capabilities respecting permissions and auditing.",
        "scope": [
            "Create quick publish endpoint with confirmation",
            "Implement bulk publish workflow for selected items",
            "Test authorization around quick and bulk publish",
        ],
        "dependencies": ["E5-F1-I2"],
        "milestone": "Week 3",
    },
    {
        "id": "E5-F1-I7",
        "epic": "Publishing Workflow",
        "type": "backend",
        "priority": "P1",
        "area": "workflow",
        "title": "Support revert published content to draft",
        "summary": "Enable reverting published content back to draft with notifications and cache invalidation.",
        "scope": [
            "Implement revert action recording reason",
            "Invalidate caches and search indexes on revert",
            "Notify original author about status change",
        ],
        "dependencies": ["E5-F1-I1"],
        "milestone": "Week 3",
    },
    {
        "id": "E5-F1-I8",
        "epic": "Publishing Workflow",
        "type": "documentation",
        "priority": "P3",
        "area": "Workflow",
        "title": "TBD: Clarify request changes feedback process",
        "summary": "Document expectations for future request changes workflow and follow-up tasks.",
        "scope": [
            "Facilitate workshop to gather feedback requirements",
            "Document UI and notification needs",
            "Create backlog ticket referencing agreed scope",
        ],
        "dependencies": [],
        "milestone": "Week 4",
    },
    {
        "id": "E6-F1-I1",
        "epic": "Public Delivery & Frontend",
        "type": "frontend",
        "priority": "P0",
        "area": "frontend",
        "title": "Establish base Blade layout & theme structure",
        "summary": "Create foundational Blade layout structure with asset pipeline configuration.",
        "scope": [
            "Build master layout with shared sections and partials",
            "Configure Vite/Mix asset pipeline with versioning",
            "Document layout components and theme hooks",
        ],
        "dependencies": ["E11-F1-I1"],
        "milestone": "Week 1",
    },
    {
        "id": "E6-F1-I2",
        "epic": "Public Delivery & Frontend",
        "type": "backend",
        "priority": "P1",
        "area": "frontend",
        "title": "Implement SEO-friendly routes & controllers",
        "summary": "Expose public routes for pages and posts with SEO metadata rendering.",
        "scope": [
            "Create controllers for posts and pages by slug",
            "Return 404 for unpublished or missing content",
            "Render meta tags and structured data",
        ],
        "dependencies": ["E2-F1-I1", "E6-F1-I1"],
        "milestone": "Week 2",
    },
    {
        "id": "E6-F1-I3",
        "epic": "Public Delivery & Frontend",
        "type": "backend",
        "priority": "P1",
        "area": "caching",
        "title": "Configure caching layer & invalidation hooks",
        "summary": "Implement caching for listings and details with automatic invalidation on content changes.",
        "scope": [
            "Configure cache driver and tag strategy",
            "Apply caching to controllers and services",
            "Invalidate tags on publish/update events",
        ],
        "dependencies": ["E11-F1-I7", "E6-F1-I2"],
        "milestone": "Week 3",
    },
    {
        "id": "E6-F1-I4",
        "epic": "Public Delivery & Frontend",
        "type": "frontend",
        "priority": "P1",
        "area": "navigation",
        "title": "Build dynamic menus and breadcrumbs",
        "summary": "Render dynamic menus and breadcrumbs derived from menu settings and taxonomy hierarchy.",
        "scope": [
            "Develop menu component for nested navigation",
            "Create breadcrumb component using hierarchy",
            "Expose widgets for placement in layouts",
        ],
        "dependencies": ["E7-F1-I3", "E6-F1-I1"],
        "milestone": "Week 3",
    },
    {
        "id": "E6-F1-I5",
        "epic": "Public Delivery & Frontend",
        "type": "fullstack",
        "priority": "P1",
        "area": "frontend",
        "title": "Implement search, pagination, and archives",
        "summary": "Provide search and archive views with pagination for published content.",
        "scope": [
            "Build search query endpoint filtering published content",
            "Implement archive pages grouped by period",
            "Validate pagination metadata in tests",
        ],
        "dependencies": ["E6-F1-I2"],
        "milestone": "Week 3",
    },
    {
        "id": "E6-F1-I6",
        "epic": "Public Delivery & Frontend",
        "type": "backend",
        "priority": "P1",
        "area": "frontend",
        "title": "Wire configurable home and blog landing pages",
        "summary": "Respect admin-configured homepage and blog landing selections on the frontend.",
        "scope": [
            "Read homepage/blog selections from settings",
            "Route requests to configured pages with fallback",
            "Write acceptance tests for configured routing",
        ],
        "dependencies": ["E7-F1-I4", "E6-F1-I2"],
        "milestone": "Week 3",
    },
    {
        "id": "E6-F1-I7",
        "epic": "Public Delivery & Frontend",
        "type": "frontend",
        "priority": "P1",
        "area": "frontend",
        "title": "Design error and maintenance pages",
        "summary": "Deliver custom 404 and maintenance views consistent with site branding.",
        "scope": [
            "Create branded 404 and maintenance Blade views",
            "Document maintenance mode toggle process",
            "Test rendering under simulated error states",
        ],
        "dependencies": ["E6-F1-I1"],
        "milestone": "Week 2",
    },
    {
        "id": "E6-F1-I8",
        "epic": "Public Delivery & Frontend",
        "type": "backend",
        "priority": "P2",
        "area": "caching",
        "title": "Implement cache busting on content publish",
        "summary": "Ensure publishing events trigger cache clearing and asset version bumps.",
        "scope": [
            "Hook publish/schedule events to cache clearing",
            "Update asset versioning for cache busting",
            "Test that stale content is refreshed",
        ],
        "dependencies": ["E6-F1-I3", "E5-F1-I3"],
        "milestone": "Week 3",
    },
    {
        "id": "E7-F1-I1",
        "epic": "Site Settings & Configuration",
        "type": "backend",
        "priority": "P0",
        "area": "settings",
        "title": "Implement settings persistence schema",
        "summary": "Create settings storage schema with repositories and default seed data.",
        "scope": [
            "Write migration for settings JSON table",
            "Expose typed getters and setters via repository",
            "Seed default site settings records",
        ],
        "dependencies": ["E11-F1-I1"],
        "milestone": "Week 1",
    },
    {
        "id": "E7-F1-I2",
        "epic": "Site Settings & Configuration",
        "type": "frontend",
        "priority": "P1",
        "area": "settings",
        "title": "Build general settings UI",
        "summary": "Provide admin UI to manage global site settings, media, and localization.",
        "scope": [
            "Design form covering site metadata and locale",
            "Integrate media uploads for logo and favicon",
            "Propagate changes across frontend immediately",
        ],
        "dependencies": ["E7-F1-I1"],
        "milestone": "Week 2",
    },
    {
        "id": "E7-F1-I3",
        "epic": "Site Settings & Configuration",
        "type": "frontend",
        "priority": "P1",
        "area": "navigation",
        "title": "Develop menu management interface",
        "summary": "Create menu builder UI supporting nested navigation with validation and preview.",
        "scope": [
            "Implement nested drag-and-drop for menu items",
            "Validate depth and prevent circular references",
            "Render live preview of menu structure",
        ],
        "dependencies": ["E7-F1-I1"],
        "milestone": "Week 2",
    },
    {
        "id": "E7-F1-I4",
        "epic": "Site Settings & Configuration",
        "type": "backend",
        "priority": "P1",
        "area": "settings",
        "title": "Enable homepage selection from pages",
        "summary": "Allow admins to select published pages for homepage and blog listing defaults.",
        "scope": [
            "Add settings fields for homepage and blog selection",
            "Validate selections are published and active",
            "Surface selected pages in frontend routing",
        ],
        "dependencies": ["E7-F1-I1", "E2-F1-I1"],
        "milestone": "Week 2",
    },
    {
        "id": "E7-F1-I5",
        "epic": "Site Settings & Configuration",
        "type": "frontend",
        "priority": "P2",
        "area": "settings",
        "title": "Create announcement banner & footer editor",
        "summary": "Provide rich text editors for announcement banner and footer content with scheduling.",
        "scope": [
            "Add rich text inputs with sanitization",
            "Support banner scheduling windows",
            "Preview banner and footer before saving",
        ],
        "dependencies": ["E7-F1-I2"],
        "milestone": "Week 3",
    },
    {
        "id": "E7-F1-I6",
        "epic": "Site Settings & Configuration",
        "type": "frontend",
        "priority": "P2",
        "area": "settings",
        "title": "Implement theme selection toggles",
        "summary": "Add light/dark theme toggle in settings with persisted user preference.",
        "scope": [
            "Expose theme selection controls in admin UI",
            "Persist theme choice and apply on frontend",
            "Test theme preference persistence",
        ],
        "dependencies": ["E7-F1-I2"],
        "milestone": "Week 3",
    },
    {
        "id": "E7-F1-I7",
        "epic": "Site Settings & Configuration",
        "type": "backend",
        "priority": "P1",
        "area": "caching",
        "title": "Add settings cache & invalidation",
        "summary": "Cache settings values with tagged invalidation upon updates.",
        "scope": [
            "Implement cache layer for settings repository",
            "Clear cache on update via observer",
            "Verify cached values refresh in tests",
        ],
        "dependencies": ["E7-F1-I1", "E11-F1-I7"],
        "milestone": "Week 3",
    },
    {
        "id": "E7-F1-I8",
        "epic": "Site Settings & Configuration",
        "type": "backend",
        "priority": "P2",
        "area": "settings",
        "title": "Build settings backup & restore",
        "summary": "Enable exporting and importing site settings via JSON with auditing.",
        "scope": [
            "Create JSON export with metadata",
            "Implement validated import with dry-run option",
            "Log export and import actions in audit trail",
        ],
        "dependencies": ["E7-F1-I1"],
        "milestone": "Week 4",
    },
    {
        "id": "E8-F1-I1",
        "epic": "API & Headless Mode",
        "type": "backend",
        "priority": "P0",
        "area": "api",
        "title": "Configure Sanctum authentication & token scopes",
        "summary": "Install Sanctum and define token scopes with management interfaces for admins and editors.",
        "scope": [
            "Install Sanctum and publish configuration",
            "Define token scopes and management endpoints",
            "Document token usage and security guidance",
        ],
        "dependencies": ["E11-F1-I1", "E1-F1-I1"],
        "milestone": "Week 1",
    },
    {
        "id": "E8-F1-I2",
        "epic": "API & Headless Mode",
        "type": "backend",
        "priority": "P1",
        "area": "api",
        "title": "Deliver public content API with filtering",
        "summary": "Expose public content endpoints with pagination, sorting, and taxonomy filters.",
        "scope": [
            "Build endpoints for published posts and pages",
            "Add pagination, sorting, and filter capabilities",
            "Apply IP-based rate limiting policies",
        ],
        "dependencies": ["E8-F1-I1", "E2-F1-I1"],
        "milestone": "Week 2",
    },
    {
        "id": "E8-F1-I3",
        "epic": "API & Headless Mode",
        "type": "backend",
        "priority": "P1",
        "area": "api",
        "title": "Expose authenticated CRUD API endpoints",
        "summary": "Provide authenticated CRUD APIs for content, taxonomy, and media following policies.",
        "scope": [
            "Implement CRUD endpoints respecting policies",
            "Validate requests returning JSON:API errors",
            "Test create/update/delete flows per role",
        ],
        "dependencies": ["E8-F1-I1", "E1-F1-I2", "E2-F1-I1"],
        "milestone": "Week 3",
    },
    {
        "id": "E8-F1-I4",
        "epic": "API & Headless Mode",
        "type": "backend",
        "priority": "P1",
        "area": "api",
        "title": "Enforce JSON:API serialization layer",
        "summary": "Ensure API responses conform to JSON:API specification including pagination metadata.",
        "scope": [
            "Create resources/transformers for JSON:API",
            "Align pagination metadata with spec",
            "Add contract tests validating responses",
        ],
        "dependencies": ["E8-F1-I2"],
        "milestone": "Week 2",
    },
    {
        "id": "E8-F1-I5",
        "epic": "API & Headless Mode",
        "type": "documentation",
        "priority": "P2",
        "area": "api",
        "title": "Publish OpenAPI documentation",
        "summary": "Generate and publish OpenAPI documentation for public and authenticated APIs.",
        "scope": [
            "Generate OpenAPI spec from annotations/tests",
            "Serve documentation at /api/docs",
            "Add CI validation for spec integrity",
        ],
        "dependencies": ["E8-F1-I2", "E8-F1-I3"],
        "milestone": "Week 3",
    },
    {
        "id": "E8-F1-I6",
        "epic": "API & Headless Mode",
        "type": "backend",
        "priority": "P2",
        "area": "integration",
        "title": "Implement webhook triggers for publish/update",
        "summary": "Fire webhooks on content publish/update events with retry handling and admin UI documentation.",
        "scope": [
            "Emit webhook events with signing secret",
            "Implement retry/backoff with logging",
            "Document webhook configuration in admin UI",
        ],
        "dependencies": ["E5-F1-I3", "E11-F1-I3", "E8-F1-I3"],
        "milestone": "Week 4",
    },
    {
        "id": "E9-F1-I1",
        "epic": "Security & Compliance",
        "type": "backend",
        "priority": "P0",
        "area": "security",
        "title": "Validate CSRF/XSS safeguards & sanitization",
        "summary": "Confirm middleware and sanitization prevent CSRF/XSS attacks across inputs.",
        "scope": [
            "Audit middleware stack for CSRF/XSS coverage",
            "Integrate HTML sanitization for rich text",
            "Write tests injecting malicious payloads",
        ],
        "dependencies": ["E11-F1-I1"],
        "milestone": "Week 1",
    },
    {
        "id": "E9-F1-I2",
        "epic": "Security & Compliance",
        "type": "backend",
        "priority": "P1",
        "area": "security",
        "title": "Enforce secure file upload constraints",
        "summary": "Enforce strict MIME and size validation with protection against executable uploads.",
        "scope": [
            "Align upload constraints with security policy",
            "Prevent executable uploads through scanning",
            "Test invalid upload rejection paths",
        ],
        "dependencies": ["E3-F1-I2"],
        "milestone": "Week 2",
    },
    {
        "id": "E9-F1-I3",
        "epic": "Security & Compliance",
        "type": "backend",
        "priority": "P1",
        "area": "security",
        "title": "Audit permission checks across mutations",
        "summary": "Verify all mutation endpoints enforce authorization and configure static analysis guardrails.",
        "scope": [
            "Review mutation endpoints for authorize calls",
            "Configure static analysis to flag missing checks",
            "Document resolved coverage gaps",
        ],
        "dependencies": ["E1-F1-I2", "E11-F1-I5"],
        "milestone": "Week 2",
    },
    {
        "id": "E9-F1-I4",
        "epic": "Security & Compliance",
        "type": "backend",
        "priority": "P1",
        "area": "security",
        "title": "Configure login & API rate limiting",
        "summary": "Set throttling rules for login attempts and public API usage with monitoring.",
        "scope": [
            "Define throttle limits for login and API routes",
            "Log lockout and throttle events",
            "Test rapid requests for proper throttling",
        ],
        "dependencies": ["E1-F1-I1", "E8-F1-I2"],
        "milestone": "Week 2",
    },
    {
        "id": "E9-F1-I5",
        "epic": "Security & Compliance",
        "type": "backend",
        "priority": "P1",
        "area": "security",
        "title": "Verify password hashing configuration",
        "summary": "Ensure secure password hashing configuration with automatic upgrades for legacy hashes.",
        "scope": [
            "Confirm bcrypt/argon2 settings meet policy",
            "Enable automatic rehash on successful login",
            "Document hashing policy for developers",
        ],
        "dependencies": ["E1-F1-I1"],
        "milestone": "Week 1",
    },
    {
        "id": "E9-F1-I6",
        "epic": "Security & Compliance",
        "type": "devops",
        "priority": "P2",
        "area": "security",
        "title": "Schedule security scans & dependency audits",
        "summary": "Automate dependency vulnerability scans and enforce failure on high severity findings.",
        "scope": [
            "Configure Dependabot/composer audit schedules",
            "Integrate CI failure on high severity issues",
            "Document reporting cadence and ownership",
        ],
        "dependencies": ["E10-F1-I1"],
        "milestone": "Week 3",
    },
    {
        "id": "E9-F1-I7",
        "epic": "Security & Compliance",
        "type": "backend",
        "priority": "P2",
        "area": "security",
        "title": "Implement access logging for admin actions",
        "summary": "Log admin access events with filtering dashboard per compliance policy.",
        "scope": [
            "Capture admin route access with metadata",
            "Build report filters by user, action, date",
            "Retain logs per compliance requirements",
        ],
        "dependencies": ["E1-F1-I6", "E9-F1-I1"],
        "milestone": "Week 3",
    },
    {
        "id": "E10-F1-I1",
        "epic": "DevOps, Testing & Quality Assurance",
        "type": "devops",
        "priority": "P0",
        "area": "ci cd",
        "title": "Set up CI/CD pipeline",
        "summary": "Establish CI pipeline running linters, tests, and publishing coverage artifacts.",
        "scope": [
            "Create GitHub Actions workflow for install/test/lint",
            "Trigger pipeline on PRs and main merges",
            "Document status badge and artifact retention",
        ],
        "dependencies": ["E11-F1-I1"],
        "milestone": "Week 1",
    },
    {
        "id": "E10-F1-I2",
        "epic": "DevOps, Testing & Quality Assurance",
        "type": "qa",
        "priority": "P1",
        "area": "testing",
        "title": "Configure test coverage enforcement",
        "summary": "Enable PHPUnit and Pest coverage reporting with CI coverage gates.",
        "scope": [
            "Set up coverage reporting for PHPUnit and Pest",
            "Fail CI when coverage drops below threshold",
            "Document local execution steps for developers",
        ],
        "dependencies": ["E10-F1-I1"],
        "milestone": "Week 2",
    },
    {
        "id": "E10-F1-I3",
        "epic": "DevOps, Testing & Quality Assurance",
        "type": "devops",
        "priority": "P1",
        "area": "static analysis",
        "title": "Integrate Larastan & PHP CS Fixer",
        "summary": "Add Larastan static analysis and PHP CS Fixer formatting enforcement to CI.",
        "scope": [
            "Configure Larastan level and baseline",
            "Define PHP CS Fixer ruleset and cache",
            "Ensure CI fails on analysis or formatting issues",
        ],
        "dependencies": ["E10-F1-I1"],
        "milestone": "Week 1",
    },
    {
        "id": "E10-F1-I4",
        "epic": "DevOps, Testing & Quality Assurance",
        "type": "devops",
        "priority": "P2",
        "area": "monitoring",
        "title": "Deploy Telescope & log monitoring",
        "summary": "Install Laravel Telescope with production safeguards and integrate log monitoring.",
        "scope": [
            "Install Telescope with restricted access",
            "Forward logs to monitoring solution",
            "Publish runbook for access and alert thresholds",
        ],
        "dependencies": ["E11-F1-I4"],
        "milestone": "Week 3",
    },
    {
        "id": "E10-F1-I5",
        "epic": "DevOps, Testing & Quality Assurance",
        "type": "documentation",
        "priority": "P1",
        "area": "configuration",
        "title": "Publish environment configuration templates",
        "summary": "Provide annotated environment templates for development, staging, and production.",
        "scope": [
            "Create .env templates with annotations",
            "Document secure handling of sensitive keys",
            "Update README with setup guidance",
        ],
        "dependencies": ["E10-F1-I1"],
        "milestone": "Week 1",
    },
    {
        "id": "E10-F1-I6",
        "epic": "DevOps, Testing & Quality Assurance",
        "type": "backend",
        "priority": "P1",
        "area": "database",
        "title": "Author migration seeding & rollback scripts",
        "summary": "Create seeders and rollback scripts for roles, content, taxonomy, and settings.",
        "scope": [
            "Develop seeders for baseline data",
            "Test rollback scripts for clean downgrades",
            "Document artisan commands for seed/rollback",
        ],
        "dependencies": ["E2-F1-I1", "E7-F1-I1"],
        "milestone": "Week 2",
    },
    {
        "id": "E10-F1-I7",
        "epic": "DevOps, Testing & Quality Assurance",
        "type": "documentation",
        "priority": "P2",
        "area": "qa",
        "title": "Document manual QA checklist & staging flow",
        "summary": "Draft manual QA checklist covering key domains and document staging approval workflow.",
        "scope": [
            "Outline manual QA scenarios across modules",
            "Define staging approval workflow and sign-offs",
            "Publish checklist in repository docs",
        ],
        "dependencies": ["E10-F1-I2"],
        "milestone": "Week 3",
    },
    {
        "id": "E11-F1-I1",
        "epic": "System Architecture Foundations",
        "type": "architecture",
        "priority": "P0",
        "area": "architecture",
        "title": "Establish modular directory structure",
        "summary": "Organize project into domain-driven directory structure with documentation.",
        "scope": [
            "Create domain-based folders and update autoloading",
            "Register base service providers per module",
            "Publish architectural overview document",
        ],
        "dependencies": [],
        "milestone": "Week 1",
    },
    {
        "id": "E11-F1-I2",
        "epic": "System Architecture Foundations",
        "type": "backend",
        "priority": "P0",
        "area": "architecture",
        "title": "Create repository interfaces & bindings",
        "summary": "Define repository interfaces with container bindings for core aggregates.",
        "scope": [
            "Draft interfaces for content, taxonomy, media, settings, users",
            "Provide Eloquent implementations and bindings",
            "Add unit tests ensuring bindings resolve",
        ],
        "dependencies": ["E11-F1-I1"],
        "milestone": "Week 1",
    },
    {
        "id": "E11-F1-I3",
        "epic": "System Architecture Foundations",
        "type": "backend",
        "priority": "P1",
        "area": "workflow",
        "title": "Implement domain events for publish/workflow",
        "summary": "Emit domain events for workflow actions and tie listeners to downstream behaviors.",
        "scope": [
            "Define events for submit, approve, publish, update",
            "Implement listeners for notifications and cache",
            "Test that events fire and listeners execute",
        ],
        "dependencies": ["E11-F1-I1"],
        "milestone": "Week 2",
    },
    {
        "id": "E11-F1-I4",
        "epic": "System Architecture Foundations",
        "type": "backend",
        "priority": "P1",
        "area": "architecture",
        "title": "Set up service layer for media/content/taxonomy",
        "summary": "Introduce service classes encapsulating business logic for media, content, and taxonomy.",
        "scope": [
            "Create service classes for media, content, taxonomy",
            "Inject services into controllers via DI",
            "Cover core service methods with tests",
        ],
        "dependencies": ["E11-F1-I2"],
        "milestone": "Week 2",
    },
    {
        "id": "E11-F1-I5",
        "epic": "System Architecture Foundations",
        "type": "backend",
        "priority": "P1",
        "area": "security",
        "title": "Define policy scaffolding",
        "summary": "Create policies for key models and register mappings in the auth service provider.",
        "scope": [
            "Author policies for content, media, taxonomy, settings",
            "Register policy mappings in AuthServiceProvider",
            "Write unit tests for critical ability checks",
        ],
        "dependencies": ["E11-F1-I1"],
        "milestone": "Week 1",
    },
    {
        "id": "E11-F1-I6",
        "epic": "System Architecture Foundations",
        "type": "backend",
        "priority": "P2",
        "area": "architecture",
        "title": "Implement feature toggle configuration",
        "summary": "Introduce configuration-driven feature flags with helper utilities and docs.",
        "scope": [
            "Create config file defining feature toggles",
            "Expose helper/trait for feature checks",
            "Document default toggle states and usage",
        ],
        "dependencies": ["E11-F1-I1"],
        "milestone": "Week 3",
    },
    {
        "id": "E11-F1-I7",
        "epic": "System Architecture Foundations",
        "type": "backend",
        "priority": "P1",
        "area": "caching",
        "title": "Design cache invalidation strategy",
        "summary": "Define cache tagging strategy and integrate invalidation within service layer events.",
        "scope": [
            "Document cache tag strategy for core domains",
            "Integrate tag invalidation on create/update/publish",
            "Describe cache lifecycle in technical note",
        ],
        "dependencies": ["E11-F1-I4"],
        "milestone": "Week 2",
    },
    {
        "id": "E11-F1-I8",
        "epic": "System Architecture Foundations",
        "type": "architecture",
        "priority": "P2",
        "area": "internationalization",
        "title": "Plan localization & multi-site schema",
        "summary": "Document schema and routing considerations for future localization and multi-site support.",
        "scope": [
            "Draft schema plan for locale-aware content",
            "Assess impact on routing, settings, media",
            "Prepare migration roadmap for future work",
        ],
        "dependencies": ["E11-F1-I1"],
        "milestone": "Week 3",
    },
]

output_path = Path("issues.csv")
with output_path.open("w", newline="", encoding="utf-8") as csvfile:
    writer = csv.writer(csvfile)
    writer.writerow(["id", "title", "body", "labels", "milestone"])
    for issue in issues:
        title = f"{issue['id']}: {issue['title']}"
        body = build_body(issue)
        labels = format_labels(issue)
        writer.writerow([issue["id"], title, body, labels, issue["milestone"]])

print(f"Wrote {len(issues)} issues to {output_path}")
